function result = ADMM(var)

max_ite = 500;
threshold = 10^-8;
count = 1;
diff = inf;

[obj] = objective_fun(var);

out = struct;
out.residual = zeros(max_ite,1);
out.obj = zeros(max_ite,1);

% profile on
actv = 1;
while count < max_ite && actv && diff > threshold

    % run alternating ADMM optimization
    out.obj(count) = obj;

    var = opt_X(var);
    var = opt_Y(var);
    var = opt_gamma(var);

    count = count + 1;

    if mod(count,20) == 1

        obj = objective_fun(var);

    end

    if mod(count,20) == 10

        obj1 = objective_fun(var);
        diff = abs((obj - obj1))/max(abs(obj),abs(obj1));

        if diff < threshold

            actv = 0;

        end
    end

end

result = struct;
result.var = var;
result.out = out;

end

function [obj] = objective_fun(var)

% full objective
obj1 = eval_obj_t(var);
obj3 = norm(var.Y - var.X + var.gamma, 'fro')^2;
obj = obj1 + var.tau/2.0*obj3;

end

function [var] = opt_X(var)

% update A and Lambda
n = var.n;
G = var.Y + var.gamma;

iter = 0;
f2_old = 0;
diff1 = Inf;
MAX = 10;

while iter < MAX && diff1 > 10^-6

    iter = iter + 1;

    % update A
    mat1 = kron(var.W.*var.lam,ones(2,1)).*var.E_est + var.tau*G;
    mat2 = kron(var.W.*var.lam.^2,ones(2,1)) + var.tau;
    A = mat1./mat2;

    % A = A/norm(A,'fro');
    % M = sqrt(reshape(sum(reshape(A.^2,2,n^2),1),n,n));
    % A = A./kron(M,[1;1]);

    idx_block = logical(kron(eye(n),ones(2,1)));
    A(idx_block) = 0; % make 2x1 block diagonals 0

    var.X = A;
    var.E = var.X;

    %% asymmetric version
    m1 = var.E_est.*var.E;
    m2 = var.E.*var.E;
    bl1 = conv2(m1,ones(2,1),'valid'); % adds elements of each 2x1 submatrix
    % formula: sum of entries of Hadarmard product of A and B is the trace of A'*B
    bl1 = bl1(1:2:end,1:end); % keeps only the properly aligned sums
    bl2 = conv2(m2,ones(2,1),'valid');
    bl2 = bl2(1:2:end,1:end);
    var.lam = bl1./bl2; % diagonals are NaN from 0/0
    var.lam(logical(eye(n))) = 0; % set the NaN values to 0

    %% symmetric version
    % W = var.W;
    % % lam = var.lam;
    % % signs = sign(lam);
    % % E = var.E;
    % % F = var.E_est;
    % % d1 = reshape(dot(reshape(F,2,n^2),reshape(E,2,n^2)),n,n);
    % % d2 = reshape(dot(reshape(E,2,n^2),reshape(E,2,n^2)),n,n);
    % d1 = reshape(sum(reshape(var.E_est.*var.E,2,n^2),1),n,n);
    % d2 = reshape(sum(reshape(var.E.*var.E,2,n^2),1),n,n);
    % % D = ((W.*lam).*d1 + ((W.*lam).*d1)')./((W.*lam.^2).*d2 + ((W.*lam.^2).*d2)');
    % D = (W.*d1 + (W.*d1)')./(W.*d2 + (W.*d2)');
    % ind = triu(ones(n)) - eye(n);
    % D(ind == 0) = 0;
    % var.lam = D + D';
    % % var.lam = signs.*(D + D');

    % bound scales inside box
    var.lam = min(var.lam,var.conv_tol);
    var.lam = max(var.lam,-var.conv_tol);

    f2 = eval_obj_t(var);
    diff1 = abs(f2 - f2_old);
    f2_old = f2;

end

end

function var = opt_Y(var)

%% added
% A = var.X;
% n = size(A,2);
% M = sqrt(reshape(sum(reshape(A.^2,2,n^2),1),n,n));
% N = kron(M,[1;1]);
% A = A.*((kron(M+M',[1;1]))./(2*N)); % average scaling; many entries vanish
% idx_block = logical(kron(eye(n),ones(2,1)));
% A(idx_block) = 0; % make 2x1 block diagonals 0
% var.X = A;

%% added 
% A = var.E;
% n = size(A,2);
% MAX_SH = var.MAX_SH;
% diffF = Inf;
% obj = Inf;
% iter_SH = 1;
% while iter_SH < MAX_SH && diffF > 10^-8
% 
%     M = sqrt(reshape(sum(reshape((A).^2,2,n^2),1),n,n));
%     [L,~] = constructScaleMats(M);
%     [~,quad2] = checkQuadrics(A);
%     var.quad = quad2;
%     [D1_mu,D2_mu,~,~] = constructDetMats(var);
%     [~,~,V] = svd(L + D1_mu + D2_mu);
%     d1 = V(:,end);
%     % d1 = norm(var.E,'fro')*V(:,end);
%     LE = diag(repelem(d1,2))*(A);
%     A = norm(A,'fro')*(LE/norm(LE,'fro'));
% 
%     M = sqrt(reshape(sum(reshape((A).^2,2,n^2),1),n,n));
%     [~,R] = constructScaleMats(M);
%     [~,quad2] = checkQuadrics(A);
%     var.quad = quad2;
%     [~,~,D1_tau,D2_tau] = constructDetMats(var);
%     [~,~,V] = svd(R + D1_tau + D2_tau);
%     d2 = V(:,end);
%     % d2 = norm(var.E,'fro')*V(:,end);
%     ER = (A)*diag(d2);
%     var.E = norm(A,'fro')*(ER/norm(ER,'fro'));
% 
%     M = sqrt(reshape(sum(reshape((A).^2,2,n^2),1),n,n));
%     norm_err = norm(M-M','fro');
%     [~,quad2] = checkQuadrics(A);
%     quad2 = var.keep_det.*quad2; %% added
%     % det_err = sum(norm(quad2(:,1) - quad2(:,2))) + sum(norm(quad2(:,2) - quad2(:,3)));
%     col1 = var.keep_det(:,1); %% added
%     col2 = var.keep_det(:,2); %% added
%     col3 = var.keep_det(:,3); %% added 
%     det_err = sum(norm(col1.*col2.*(quad2(:,1) - quad2(:,2)))) + sum(norm(col2.*col3.*(quad2(:,2) - quad2(:,3)))); %% added
% 
%     diffF = abs(obj - (norm_err + det_err));
%     obj = norm_err + det_err;
%     iter_SH = iter_SH + 1;
% 
% end
% var.X = A;
% var.E = var.X;

% update B
tmpY = var.X - var.gamma;
[U, S, V] = svd(tmpY);
% [U, S, V] = svds(tmpY, 3);
var.Y = U(:,1:3)*S(1:3,1:3)*V(:,1:3)';
% var.Y = U*S*V';

end

function var = opt_gamma(var)

% update Gamma
var.gamma = var.gamma + (var.Y - var.X);

end

function f = eval_obj_t(var)

% objective for A and Lambda
e = var.E_est - var.E.*kron(var.lam,ones(2,1));
w = kron(var.W,ones(2,1));
f = 0.5*sum(sum(w.*e.^2));

end
