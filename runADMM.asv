function [A_out,fval,vld] = runADMM(A)

n = size(A,2);
data.n = n;
data.keep = not(logical(eye(n)));

data.E_est = cell(n,n);
for i = 1:n
    for j = 1:n
        data.E_est{i,j} = A(s3(i),j);
    end
end

%% Optimization parameter initialization

% IR_iter = 200;
IR_iter = 50;

% find missing indices for determinant equation correction
% var.n = n;
% [missing_mu, missing_tau1, missing_tau2] = generateMissing(n);
% var.missing_mu = missing_mu;
% var.missing_tau1 = missing_tau1;
% var.missing_tau2 = missing_tau2;

M = sqrt(reshape(sum(reshape(A.^2,2,n^2),1),n,n));
A = A./kron(M,[1;1]);
idx_block = logical(kron(eye(n),ones(2,1)));
A(idx_block) = 0; % make 2x1 block diagonals 0

% A_fixed = A;
% M = sqrt(reshape(sum(reshape((A_fixed).^2,2,n^2),1),n,n));
% norm_err = norm(M-M','fro');
% [~,quad2] = checkQuadrics(A_fixed);
% det_err = sum(norm(quad2(:,1) - quad2(:,2))) + sum(norm(quad2(:,2) - quad2(:,3)));
% fprintf('error before %.9e\n',norm_err + det_err);
% MAX_SH = 1000;
% 
% for i = 1:MAX_SH
% 
%     [L,~] = constructScaleMats(M);
%     [~,quad2] = checkQuadrics(A_fixed);
%     var.quad = quad2;
%     [D1_mu,D2_mu,~,~] = constructDetMats(var);
%     [~,~,V] = svd(L + D1_mu + D2_mu);
%     % [~,~,V] = svd(L);
%     d1 = V(:,end);
%     LM = diag(d1)*M;
%     M = norm(M,'fro')*(LM/norm(LM,'fro'));
%     LE = diag(repelem(d1,2))*(A_fixed);
%     var.E = norm(A_fixed,'fro')*(LE/norm(LE,'fro'));
% 
%     % norm_err = norm(M-M','fro');
%     % [~,quad2] = checkQuadrics(var.E);
%     % det_err = sum(norm(quad2(:,1) - quad2(:,2))) + sum(norm(quad2(:,2) - quad2(:,3)));
%     % fprintf('error after rows %.9e\n',norm_err + det_err);
% 
%     [~,R] = constructScaleMats(M);
%     [~,quad2] = checkQuadrics(A_fixed);
%     var.quad = quad2;
%     [~,~,D1_tau,D2_tau] = constructDetMats(var);
%     [~,~,V] = svd(R + D1_tau + D2_tau);
%     d2 = V(:,end);
%     MR = M*diag(d2);
%     M = norm(M,'fro')*(MR/norm(MR,'fro'));
%     ER = (A_fixed)*diag(d2);
%     var.E = norm(A_fixed,'fro')*(ER/norm(ER,'fro'));
% 
%     % norm_err = norm(M-M','fro');
%     % [~,quad2] = checkQuadrics(var.E);
%     % det_err = sum(norm(quad2(:,1) - quad2(:,2))) + sum(norm(quad2(:,2) - quad2(:,3)));
%     % fprintf('error after columns %.9e\n',norm_err + det_err);
% 
% end
% 
% norm_err = norm(M-M','fro');
% [~,quad2] = checkQuadrics(A_fixed);
% det_err = sum(norm(quad2(:,1) - quad2(:,2))) + sum(norm(quad2(:,2) - quad2(:,3)));
% fprintf('error after %.9e\n',norm_err + det_err);
% 
% vld = 0;


a = 0.5;
b = 0.75;
% a = -1;
% b = 1;
randlam = (b-a)*rand(n) + a;
randlam(logical(eye(n))) = 0;
% A_fixed = A.*kron(randlam,[1;1]);
% [A_fixed,vld] = fixSigns(A_fixed);
[A_fixed,vld] = fixSigns(A.*kron(randlam,[1;1]));
% [A_fixed,vld] = fixSigns(A.*kron(sign(randlam),[1;1]));
% [A_fixed,vld] = fixSigns(A);

% if vld == 0
%     fval = Inf;
%     A_out = A_fixed;
%     return;
% end

% [A_fixed,vld] = fixSigns(A);

MAX_TRY = 25;
if vld == 0
    fvalBest = Inf;
    for i = 1:MAX_TRY
        a = 0.5;
        b = 0.75;
        % a = -1;
        % b = 1;
        randlam = (b-a)*rand(n) + a;
        randlam(logical(eye(n))) = 0;
        [A_try,fval] = gafixSigns(A.*kron(sign(randlam),[1;1]));
        % [A_try,fval] = gafixSigns(A);
        fval
        if fval < fvalBest
            fvalBest = fval;
            A_fixed = A_try;
        end
    end
end

% A_fixed = create_A(n);
% vld = 1;

% [~,quad2] = checkQuadrics(A_fixed);
% sign(quad2)
data.A = A_fixed;
[var,~] = initialize_param(data);

%% Run IRLS and ADMM

[result] = IRLS(var,IR_iter);
var = result.var;

%% Fix norm equations with Sinkhorn

% var.E;
% var.E = var.E/norm(var.E,'fro');

M = sqrt(reshape(sum(reshape((var.E).^2,2,n^2),1),n,n));
norm_err = norm(M-M','fro');
[~,quad2] = checkQuadrics(var.E);
det_err = sum(norm(quad2(:,1) - quad2(:,2))) + sum(norm(quad2(:,2) - quad2(:,3)));
fprintf('error before %.9e\n',norm_err + det_err);
% fprintf('error before %.9e\n',det_err);
MAX_SH = 500;

for i = 1:MAX_SH

    % M = reshape(sum(reshape((var.E).^2,2,n^2),1),n,n);
    M = sqrt(reshape(sum(reshape((var.E).^2,2,n^2),1),n,n));
    [L,~] = constructScaleMats(M);
    [~,quad2] = checkQuadrics(var.E);
    var.quad = quad2;
    [D1_mu,D2_mu,~,~] = constructDetMats(var);
    [~,~,V] = svd(L + D1_mu + D2_mu);
    % [~,~,V] = svd(L);
    % [~,~,V] = svd(D1_mu + D2_mu);
    d1 = V(:,end);
    % d1 = abs(V(:,end));
    % LM = diag(d1)*M;
    % M = norm(M,'fro')*(LM/norm(LM,'fro'));
    LE = diag(repelem(d1,2))*(var.E);
    var.E = norm(var.E,'fro')*(LE/norm(LE,'fro'));

    % M = sqrt(reshape(sum(reshape((var.E).^2,2,n^2),1),n,n));
    % norm_err = norm(M-M','fro');
    % [~,quad2] = checkQuadrics(var.E);
    % det_err = sum(norm(quad2(:,1) - quad2(:,2))) + sum(norm(quad2(:,2) - quad2(:,3)));
    % fprintf('error after rows %.9e\n',norm_err + det_err);

    M = sqrt(reshape(sum(reshape((var.E).^2,2,n^2),1),n,n));
    [~,R] = constructScaleMats(M);
    [~,quad2] = checkQuadrics(var.E);
    var.quad = quad2;
    [~,~,D1_tau,D2_tau] = constructDetMats(var);
    [~,~,V] = svd(R + D1_tau + D2_tau);
    % [~,~,V] = svd(D1_tau + D2_tau);
    % [~,~,V] = svd(R);
    d2 = V(:,end);
    % MR = M*diag(d2);
    % M = norm(M,'fro')*(MR/norm(MR,'fro'));
    ER = (var.E)*diag(d2);
    var.E = norm(var.E,'fro')*(ER/norm(ER,'fro'));

    M = sqrt(reshape(sum(reshape((var.E).^2,2,n^2),1),n,n));
    norm_err = norm(M-M','fro');
    [~,quad2] = checkQuadrics(var.E);
    det_err = sum(norm(quad2(:,1) - quad2(:,2))) + sum(norm(quad2(:,2) - quad2(:,3)));
    fprintf('error after rows %.9e\n',norm_err + det_err);
    % 
    % % M = reshape(sum(reshape((var.E).^2,2,n^2),1),n,n);
    % % [L,~] = constructScaleMats(M);
    % [~,quad2] = checkQuadrics(var.E);
    % var.quad = quad2;
    % [D1_mu,D2_mu,~,~] = constructDetMats(var);
    % % [~,~,V] = svd(L + D1_mu + D2_mu);
    % % [~,~,V] = svd(L);
    % [~,~,V] = svd(D1_mu + D2_mu);
    % d1 = V(:,end);
    % % d1 = abs(V(:,end))
    % % LM = diag(d1)*M;
    % % M = norm(M,'fro')*(LM/norm(LM,'fro'));
    % LE = diag(repelem(d1,2))*(var.E);
    % var.E = norm(var.E,'fro')*(LE/norm(LE,'fro'));
    % 
    % % [~,R] = constructScaleMats(M);
    % [~,quad2] = checkQuadrics(var.E);
    % var.quad = quad2;
    % [~,~,D1_tau,D2_tau] = constructDetMats(var);
    % % [~,~,V] = svd(R + D1_tau + D2_tau);
    % [~,~,V] = svd(D1_tau + D2_tau);
    % d2 = V(:,end);
    % % MR = M*diag(d2);
    % % M = norm(M,'fro')*(MR/norm(MR,'fro'));
    % ER = (var.E)*diag(d2);
    % var.E = norm(var.E,'fro')*(ER/norm(ER,'fro'));
    % 
    % M = sqrt(reshape(sum(reshape((var.E).^2,2,n^2),1),n,n));
    % norm_err = norm(M-M','fro');
    % [~,quad2] = checkQuadrics(var.E);
    % det_err = sum(norm(quad2(:,1) - quad2(:,2))) + sum(norm(quad2(:,2) - quad2(:,3)));
    % fprintf('error after columns %.9e\n',norm_err + det_err);
    % fprintf('error after columns %.9e\n',det_err);
    % fprintf('error after columns %.9e\n',norm_err);

end



% norm_err = norm(M-M','fro');
% [~,quad2] = checkQuadrics(var.E);
% det_err = sum(norm(quad2(:,1) - quad2(:,2))) + sum(norm(quad2(:,2) - quad2(:,3)));
% fprintf('error after %.9e\n',norm_err + det_err);

%% Output

A_out = var.E; % exclude bad reconstructions
var.lam;
% [~,quad2] = checkQuadrics(var.E);
% fval = sum(abs(abs(quad2(:,1)) - abs(quad2(:,2)))) + sum(abs(abs(quad2(:,2)) - abs(quad2(:,2))));
M = sqrt(reshape(sum(reshape((var.E).^2,2,n^2),1),n,n));
norm_err = norm(M-M','fro');
[~,quad2] = checkQuadrics(var.E);
det_err = sum(norm(quad2(:,1) - quad2(:,2))) + sum(norm(quad2(:,2) - quad2(:,3)));
fval = norm_err + det_err
% fval = det_err

end